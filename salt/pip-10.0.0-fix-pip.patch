diff --git a/salt/modules/pip.py b/salt/modules/pip.py
index d94086e..886e6d0 100644
--- a/salt/modules/pip.py
+++ b/salt/modules/pip.py
@@ -384,7 +384,8 @@ def install(pkgs=None,  # pylint: disable=R0912,R0913,R0914
             use_vt=False,
             trusted_host=None,
             no_cache_dir=False,
-            cache_dir=None):
+            cache_dir=None,
+            no_binary=None):
     '''
     Install packages with pip
 
@@ -410,7 +411,12 @@ def install(pkgs=None,  # pylint: disable=R0912,R0913,R0914
         Prefer wheel archives (requires pip>=1.4)
 
     no_use_wheel
-        Force to not use wheel archives (requires pip>=1.4)
+        Force to not use wheel archives (requires pip>=1.4,<10.0.0)
+
+    no_binary
+        Force to not use binary packages (requires pip >= 7.0.0)
+        Accepts either :all: to disable all binary packages, :none: to empty the set,
+        or one or more package names with commas between them
 
     log
         Log file where a complete (maximum verbosity) record will be kept
@@ -582,30 +588,49 @@ def install(pkgs=None,  # pylint: disable=R0912,R0913,R0914
 
     if use_wheel:
         min_version = '1.4'
+        max_version = '9.0.3'
         cur_version = __salt__['pip.version'](bin_env)
-        if not salt.utils.versions.compare(ver1=cur_version, oper='>=',
-                                           ver2=min_version):
+        too_low = salt.utils.compare_versions(ver1=cur_version, oper='<', ver2=min_version)
+        too_high = salt.utils.compare_versions(ver1=cur_version, oper='>', ver2=max_version)
+        if too_low or too_high:
             logger.error(
-                'The --use-wheel option is only supported in pip %s and '
-                'newer. The version of pip detected is %s. This option '
-                'will be ignored.', min_version, cur_version
+                ('The --use-wheel option is only supported in pip between {0} and '
+                 '{1}. The version of pip detected is {2}. This option '
+                 'will be ignored.'.format(min_version, max_version, cur_version))
             )
         else:
             cmd.append('--use-wheel')
 
     if no_use_wheel:
         min_version = '1.4'
+        max_version = '9.0.3'
         cur_version = __salt__['pip.version'](bin_env)
-        if not salt.utils.versions.compare(ver1=cur_version, oper='>=',
-                                           ver2=min_version):
+        too_low = salt.utils.compare_versions(ver1=cur_version, oper='<', ver2=min_version)
+        too_high = salt.utils.compare_versions(ver1=cur_version, oper='>', ver2=max_version)
+        if too_low or too_high:
             logger.error(
-                'The --no-use-wheel option is only supported in pip %s and '
-                'newer. The version of pip detected is %s. This option '
-                'will be ignored.', min_version, cur_version
+                ('The --no-use-wheel option is only supported in pip between {0} and '
+                 '{1}. The version of pip detected is {2}. This option '
+                 'will be ignored.'.format(min_version, max_version, cur_version))
             )
         else:
             cmd.append('--no-use-wheel')
 
+    if no_binary:
+        min_version = '7.0.0'
+        cur_version = __salt__['pip.version'](bin_env)
+        too_low = salt.utils.compare_versions(ver1=cur_version, oper='<', ver2=min_version)
+        if too_low:
+            logger.error(
+                ('The --no-binary option is only supported in pip {0} and '
+                 'newer. The version of pip detected is {1}. This option '
+                 'will be ignored.'.format(min_version, cur_version))
+            )
+        else:
+            if isinstance(no_binary, list):
+                no_binary = ','.join(no_binary)
+            cmd.extend(['--no-binary', no_binary])
+
     if log:
         if os.path.isdir(log):
             raise IOError(
@@ -770,6 +795,11 @@ def install(pkgs=None,  # pylint: disable=R0912,R0913,R0914
         # Put the commas back in while making sure the names are contained in
         # quotes, this allows for proper version spec passing salt>=0.17.0
         cmd.extend([p.replace(';', ',') for p in pkgs])
+    elif not any([requirements, editable]):
+        # Starting with pip 10.0.0, if no packages are specified in the
+        # command, it returns a retcode 1.  So instead of running the command,
+        # just return the output without running pip.
+        return {'retcode': 0, 'stdout': 'No packages to install.'}
 
     if editable:
         egg_match = re.compile(r'(?:#|#.*?&)egg=([^&]*)')
